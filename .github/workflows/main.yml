name: Build and Release Cross-Platform Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_suffix: .exe
          
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_suffix: ""
          
          # Linux ARM64 (for newer ARM servers)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_suffix: ""
          
          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          
          # macOS Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          
          # Android/Termux (ARM64)
          - target: aarch64-linux-android
            os: ubuntu-latest
            binary_suffix: ""
          
          # Android/Termux (ARM)
          - target: armv7-linux-androideabi
            os: ubuntu-latest
            binary_suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Cross (for cross-compilation)
      if: matrix.target == 'aarch64-unknown-linux-gnu' || contains(matrix.target, 'android')
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Setup Android NDK (for Android targets)
      if: contains(matrix.target, 'android')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binary (native)
      if: matrix.target != 'aarch64-unknown-linux-gnu' && !contains(matrix.target, 'android')
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Build binary (cross-compile)
      if: matrix.target == 'aarch64-unknown-linux-gnu' || contains(matrix.target, 'android')
      run: |
        cross build --release --target ${{ matrix.target }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        binary_name="gcli2api${{ matrix.binary_suffix }}"
        target_dir="target/${{ matrix.target }}/release"
        
        # Create release directory
        mkdir -p release
        
        # Copy binary and rename with target suffix
        cp "$target_dir/$binary_name" "release/gcli2api-${{ matrix.target }}${{ matrix.binary_suffix }}"
        
        # Create compressed archive
        cd release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "gcli2api-${{ matrix.target }}.zip" "gcli2api-${{ matrix.target }}${{ matrix.binary_suffix }}"
        else
          tar -czf "gcli2api-${{ matrix.target }}.tar.gz" "gcli2api-${{ matrix.target }}${{ matrix.binary_suffix }}"
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: gcli2api-${{ matrix.target }}
        path: release/gcli2api-${{ matrix.target }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "gcli2api-*" -type f -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
