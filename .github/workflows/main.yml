name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ github.event.inputs.tag }}
        git push origin ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-tag
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_suffix: .exe
            archive_name: jellycli-windows-x86_64.zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_suffix: ""
            archive_name: jellycli-linux-x86_64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        binary_name="jellycli${{ matrix.binary_suffix }}"
        target_dir="target/${{ matrix.target }}/release"
        
        # Create release directory
        mkdir -p release
        
        # Copy binary
        cp "$target_dir/$binary_name" "release/"
        
        # Create archive
        cd release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "${{ matrix.archive_name }}" "$binary_name"
        else
          tar -czf "${{ matrix.archive_name }}" "$binary_name"
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: jellycli-${{ matrix.target }}
        path: release/${{ matrix.archive_name }}

  build-and-push-docker:
    name: Build and Push Docker Image (Self-Contained)
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ github.event.inputs.tag }}
          ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [create-tag, build, build-and-push-docker]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I {} cp {} release-assets/
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
